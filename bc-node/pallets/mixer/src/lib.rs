#![cfg_attr(not(feature = "std"), no_std)]
#![feature(unsized_locals)]
extern crate alloc;

mod helpers;
mod logic;
mod shuffle;
pub mod types;

#[cfg(test)]
mod mock;

#[cfg(test)]
#[macro_use]
mod tests;

pub mod keys;

use codec::{Decode, Encode};
use core::convert::TryInto;
use frame_support::{
    debug, decl_error, decl_event, decl_module, decl_storage, dispatch::DispatchResult,
    weights::Pays,
};
use frame_system::{
    self as system, ensure_signed,
    offchain::{
        AppCrypto, CreateSignedTransaction, SendSignedTransaction, SignedPayload, Signer,
        SigningTypes,
    },
};
use num_bigint::BigUint;
use num_traits::One;
use sp_runtime::{offchain as rt_offchain, RuntimeDebug};
use sp_std::{collections::vec_deque::VecDeque, prelude::*, str, vec::Vec};
use types::{Ballot, PublicKey as SubstratePK};

/// the type to sign and send transactions.
#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]
pub struct Payload<Public> {
    number: u64,
    public: Public,
}

impl<T: SigningTypes> SignedPayload<T> for Payload<T::Public> {
    fn public(&self) -> T::Public {
        self.public.clone()
    }
}

/// This is the pallet's configuration trait
pub trait Trait: system::Trait + CreateSignedTransaction<Call<Self>> {
    /// The identifier type for an offchain worker.
    type AuthorityId: AppCrypto<Self::Public, Self::Signature>;
    /// The overarching dispatch call type.
    type Call: From<Call<Self>>;
    /// The overarching event type.
    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;
}

decl_storage! {
    trait Store for Module<T: Trait> as OffchainModule {
        /// A vector of recently submitted numbers (at most 10).
        Numbers get(fn numbers): VecDeque<u64>;

        /// The system's public key
        PublicKey get(fn public_key): Option<SubstratePK>;

        /// A vector containing all submitted votes
        Ballots get(fn ballots): Vec<Ballot>;

        /// A vector containing the IDs of voters that have submitted their ballots
        Voters get(fn voters): Vec<T::AccountId>;
    }
}

decl_event!(
    /// Events generated by the module.
    pub enum Event<T>
    where
        AccountId = <T as system::Trait>::AccountId,
    {
        /// Event generated when a new number is accepted to contribute to the average.
        NewNumber(Option<AccountId>, u64),

        /// ballot submission event -> [from/who, encrypted ballot]
        VoteSubmitted(AccountId, Ballot),

        /// public key stored event -> [from/who, public key]
        PublicKeyStored(AccountId, SubstratePK),
    }
);

decl_error! {
    pub enum Error for Module<T: Trait> {
        // Error returned when not sure which off-chain worker function to executed
        UnknownOffchainMux,

        // Error returned when making signed transactions in off-chain worker
        NoLocalAcctForSigning,
        OffchainSignedTxError,

        // Error returned when failing to get randomness
        RandomnessGenerationError,

        // Error returned when upper bound is zero
        RandomnessUpperBoundZeroError,

        // Error returned when error occurs in gen_random_range
        RandomRangeError,

        // Error returned when permutation size is zero
        PermutationSizeZeroError,

        // Error returned when ballots are empty when trying to shuffle them
        ShuffleBallotsSizeZeroError,

        // Error returned when public key doesn't exist
        PublicKeyNotExistsError,

        // Error returned when inverse modulo operation fails
        InvModError,

        // Error returned when division modulo operation fails
        DivModError,
    }
}

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        // Errors must be initialized if they are used by the pallet.
        type Error = Error<T>;

        // Events must be initialized if they are used by the pallet.
        fn deposit_event() = default;

        #[weight = 10000]
        pub fn submit_number_signed(origin, number: u64) -> DispatchResult {
            let who = ensure_signed(origin)?;
            debug::info!("submit_number_signed: ({}, {:?})", number, who);

            Numbers::mutate(|numbers| {
                if numbers.len() == 10 {
                    let _ = numbers.pop_front();
                }
                numbers.push_back(number);
                debug::info!("Number vector: {:?}", numbers);
            });

            Self::deposit_event(RawEvent::NewNumber(Some(who), number));
            Ok(())
        }

        #[weight = (10000, Pays::No)]
        pub fn store_public_key(origin, pk: SubstratePK) -> DispatchResult {
          // check that the extrinsic was signed and get the signer.
          let who = ensure_signed(origin)?;
          let address_bytes = who.encode();
          debug::info!("Voter {:?} (encoded: {:?}).", &who, address_bytes);

          // store the public key
          PublicKey::put(pk.clone());

          // notify that the public key has been successfully stored
          Self::deposit_event(RawEvent::PublicKeyStored(who, pk));

          // Return a successful DispatchResult
          Ok(())
        }

        #[weight = (10000, Pays::No)]
        pub fn cast_ballot(origin, ballot: Ballot) -> DispatchResult {
          // check that the extrinsic was signed and get the signer.
          let who = ensure_signed(origin)?;
          let address_bytes = who.encode();
          debug::info!("Voter {:?} (encoded: {:?}) cast a ballot.", &who, address_bytes);

          // store the ballot
          Self::store_ballot(who.clone(), ballot.clone());

          // notify that the ballot has been submitted and successfully stored
          Self::deposit_event(RawEvent::VoteSubmitted(who, ballot));

          // Return a successful DispatchResult
          Ok(())
        }

        fn offchain_worker(block_number: T::BlockNumber) {
            debug::info!("off-chain worker: entering...");

            let result = Self::offchain_signed_tx(block_number);
            match result {
                Ok(_) => debug::info!(
                    "off-chain worker: successfully submitted signed_tx {:?}",
                    block_number
                ),
                Err(e) => debug::error!("off-chain worker - error: {:?}", e),
            }

            let number: BigUint = BigUint::parse_bytes(b"10981023801283012983912312", 10).unwrap();
            let random = Self::get_random_biguint_less_than(&number);
            match random {
                Ok(value) => debug::info!(
                    "off-chain worker: random value: {:?} less than: {:?}",
                    value,
                    number
                ),
                Err(error) => debug::error!("off-chain worker - error: {:?}", error),
            }

            let lower: BigUint = BigUint::one();
            let value = Self::get_random_bigunint_range(&lower, &number);
            match value {
                Ok(val) => debug::info!("off-chain worker: random bigunit value in range. lower: {:?}, upper: {:?}, value: {:?}", lower, number, val),
                Err(error) => debug::error!("off-chain worker - error: {:?}", error),
            }

            let value = Self::get_random_range(5, 12312356);
            match value {
                Ok(val) => debug::info!(
                    "off-chain worker: random value in range. lower: {:?}, upper: {:?}, value: {:?}",
                    5,
                    12312356,
                    val
                ),
                Err(error) => debug::error!("off-chain worker - error: {:?}", error),
            }

            let value = Self::generate_permutation(10);
            match value {
                Ok(val) => debug::info!("off-chain worker: permutation: {:?}", val),
                Err(error) => debug::error!("off-chain worker - error: {:?}", error),
            }

            debug::info!("off-chain worker: done...");
        }
    }
}

impl<T: Trait> rt_offchain::storage_lock::BlockNumberProvider for Module<T> {
    type BlockNumber = T::BlockNumber;
    fn current_block_number() -> Self::BlockNumber {
        <frame_system::Module<T>>::block_number()
    }
}
